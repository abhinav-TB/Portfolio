{"componentChunkName":"component---src-pages-blog-js","path":"/blog/","result":{"data":{"allStrapiBlogs":{"nodes":[{"desc":"Promises are one of the ways we can deal with asynchronous operations in JavaScript. Many people struggle with understanding how Promises work, so in this post I will try to explain them as simply as I can.","date":"07 15th, 202020","slug":"promises-in-javascript","title":"Promises in javascript","content":"# JavaScript Promises\n## A new way to write asynchronous code\n\n- first \n- second\n- third\n\nA Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.\n\n```\nconst p1 = new Promise((resolve, reject) => {\n    console.log(\"Promise has started\");\n    const lifeIsEasy = false;\n    if (lifeIsEasy) {\n        //Value to be returned if the promise is resolved\n        //return value is optional\n        resolve(\"No it's not\");\n    }\n    else {\n        //Value to be returned if the promise is rejected\n        //return value is also optional\n        reject(\"welcome to the real world\");\n    }\n});\n//then is executed when the promise is resolved\np1.then(value => {\n    console.log(value);\n})\n//catch is executed when the promise is rejected\n  .catch (err => {\n    console.log(err);\n});\n```\n\n\n![articleocw-5843ec76e41e3](http://localhost:1337/uploads/articleocw-5843ec76e41e3_0ee2aa07a3.png)","category":"javascript","image":{"childImageSharp":{"fluid":{"src":"/Portfolio/static/c398311ffae1745bdb73a40357ab65a3/8c332/0199ea84363d83a5146113ca9277abe9.png"}}}}]}},"pageContext":{}}}